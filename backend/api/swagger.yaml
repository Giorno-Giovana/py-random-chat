openapi: 3.0.1
info:
  title: Totem
  description: "Junction Brella Totem"
  version: 0.0.1
servers:
  - url: /api
security:
  - BearerAuth: []

paths:
  /auth/register:
    post:
      tags:
        - Authorization
      summary: Init register user
      security: []
      parameters:
        - $ref: '#/components/parameters/DefaultParameters'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUserRequest"
        required: true
      responses:
        500:
          description: Internal error
          content: {}
        200:
          description: Success, token is only for debug and is in fact handshake_id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterUserResponse"

  /auth/login:
    post:
      tags:
        - Authorization
      summary: Init login user
      security: []
      parameters:
        - $ref: '#/components/parameters/DefaultParameters'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUserRequest"
        required: true
      responses:
        500:
          description: Internal error
          content: {}
        200:
          description: Телефонный код
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginUserResponse"

  /user/update/data:
    post:
      tags:
        - User
      summary: Update user data
      parameters:
        - $ref: '#/components/parameters/DefaultParameters'
      requestBody:
        description: Обновляются только переданные поля
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserDataRequest"
        required: true
      responses:
        500:
          description: Internal error
          content: {}
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateUserDataResponse"
  
  /user/search:
      get:
        tags:
          - User
        summary: Search users
        parameters:
          - in: query
            name: selector
            schema:
              type: string
            required: true
            description: Строка, которая в качестве подстроки ищется среди email и username пользователей.
          - $ref: '#/components/parameters/DefaultParameters'
        responses:
          500:
            description: Internal error
            content: {}
          200:
            description: Представители
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/SearchUsersResponse"

  /user/get:
    get:
      tags:
        - User
      summary: Get user data
      parameters:
        - in: query
          name: user_id
          description: Если пусто, то возвращает информацию о пользователе клиента
          schema:
            type: string
        - $ref: '#/components/parameters/DefaultParameters'
      responses:
        500:
          description: Internal error
        200:
          description: Данные пользователя
          content:
            application/json:
              schema:
                properties:
                  user:
                    $ref: "#/components/schemas/User"

components:
  parameters:
    DefaultParameters:
      in: header
      name: X-Request-ID
      schema:
        type: string
        format: uuid

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterUserRequest:
      type: object
      properties:
        email:
          type: string
          example: mail@example.com
        username:
          type: string
        password:
          type: string
          example: password

    RegisterUserResponse:
      $ref: "#/components/schemas/AuthTokenResponse"

    LoginUserRequest:
      type: object
      properties:
        email:
          type: string
          example: mail@example.com
        password:
          type: string
          example: password

    LoginUserResponse:
      $ref: "#/components/schemas/AuthTokenResponse"

    BasicResponse:
      type: object
      properties:
        error:
          type: string
          example: error

    TokenResponse:
      type: object
      properties:
        token:
          type: string
          description: base64 string
    
    AuthTokenResponse:
      type: object
      properties:
        auth_token:
          type: string
          description: jwt token

    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          example: mail@example.com
        username:
          type: string
    
    SearchUsersResponse:
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/User" 
    
    UpdateUserDataRequest:
      type: object
      properties:
        username:
          type: string

    UpdateUserDataResponse:
      $ref: "#/components/schemas/BasicResponse"
